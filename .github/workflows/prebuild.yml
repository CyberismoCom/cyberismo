name: Build Native Prebuilds

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - 'tools/node-clingo/**'

jobs:
  check-version-change:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.version_changed }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout current code
        uses: actions/checkout@v4
        with:
          path: current

      - name: Check if version changed against latest release
        id: check
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./current/tools/node-clingo/package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Get latest release tag name for node-clingo
          # We filter tags starting with 'node-clingo-'
          # Note: This might need adjustment if your tagging strategy changes or if other tags exist
          LATEST_TAG=$(gh release list --repo $GITHUB_REPOSITORY --limit 1 --json tagName --jq '.[0].tagName // ""')

          if [ -z "$LATEST_TAG" ] || [[ ! "$LATEST_TAG" == node-clingo-* ]]; then
            echo "No previous node-clingo release found. Assuming version changed."
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "Latest release tag: $LATEST_TAG"
            # Extract version from tag (assuming format node-clingo-x.y.z)
            PREVIOUS_VERSION=$(echo $LATEST_TAG | sed 's/^node-clingo-//')
            echo "Previous release version: $PREVIOUS_VERSION"

            if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
              echo "version_changed=true" >> $GITHUB_OUTPUT
            else
              echo "version_changed=false" >> $GITHUB_OUTPUT
            fi
          fi

          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-prebuilds:
    permissions:
      contents: read
    needs: check-version-change
    if: |
      (github.event_name == 'pull_request' && github.base_ref == 'main') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.check-version-change.outputs.version_changed == 'true')
    strategy:
      fail-fast: false
      matrix:
        include:
          # Native builds
          - os: ubuntu-latest
            arch: x64
          - os: macos-13
            arch: x64
          - os: macos-latest # Apple Silicon runner
            arch: arm64
          - os: windows-latest
            arch: x64
          - os: ubuntu-24.04-arm
            arch: arm64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup Miniconda
        if: runner.os == 'Windows'
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: 3.12
          auto-update-conda: true
          activate-environment: cyberismo
          environment-file: environment.yml

      - name: Install clingo
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gringo
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - name: Install homebrew
        if: runner.os == 'macOS'
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

      - name: Install clingo
        if: runner.os == 'macOS'
        run: |
          brew install clingo --ignore-dependencies

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@cyberismo'

      - name: Install dependencies
        working-directory: tools/node-clingo
        run: pnpm install

      - name: Prebuild Linux (glibc)
        if: runner.os == 'Linux'
        working-directory: tools/node-clingo
        run: |
          pnpm build-prebuildify
          # Rename the glibc build
          if [ -f prebuilds/linux-${{ matrix.arch }}/@cyberismo+node-clingo.node ]; then
            mv prebuilds/linux-${{ matrix.arch }}/@cyberismo+node-clingo.node prebuilds/linux-${{ matrix.arch }}/@cyberismo+node-clingo.glibc.node
            echo "Renamed glibc prebuild to @cyberismo+node-clingo.glibc.node for linux-${{ matrix.arch }}"
          else
            echo "ERROR: Glibc prebuild file not found at prebuilds/linux-${{ matrix.arch }}/@cyberismo+node-clingo.node"
            exit 1
          fi
        env:
          PREBUILD_ARCH: ${{ matrix.arch }}
          CC: gcc-14
          CXX: g++-14

      - name: Build and extract prebuilds for Linux (musl via Docker)
        if: runner.os == 'Linux'
        run: |
          echo "Building Linux x64 (musl) prebuilds using Docker..."
          docker build -t node-clingo-builder-musl -f tools/node-clingo/alpine.Dockerfile .
          
          echo "Creating musl output directory on runner: ./docker-prebuilds-musl-output"
          mkdir -p ./docker-prebuilds-musl-output
          
          echo "Running Docker container to generate musl prebuilds..."
          docker run --rm -v "$(pwd)/docker-prebuilds-musl-output:/output" node-clingo-builder-musl
          
          echo "Copying and renaming musl prebuilds from ./docker-prebuilds-musl-output/linux-${{ matrix.arch }}/ to tools/node-clingo/prebuilds/linux-${{ matrix.arch }}/"
          MUSL_PREBUILD_PATH="./docker-prebuilds-musl-output/linux-${{ matrix.arch }}/@cyberismo+node-clingo.node"
          TARGET_MUSL_PREBUILD_PATH="tools/node-clingo/prebuilds/linux-${{ matrix.arch }}/@cyberismo+node-clingo.musl.node"

          if [ -f "$MUSL_PREBUILD_PATH" ]; then
            # Ensure the target directory exists (it should have been created by the glibc build step or needs to be created for musl)
            mkdir -p tools/node-clingo/prebuilds/linux-${{ matrix.arch }}/
            cp "$MUSL_PREBUILD_PATH" "$TARGET_MUSL_PREBUILD_PATH"
            echo "Copied and renamed musl prebuild to $TARGET_MUSL_PREBUILD_PATH"
          else
            echo "ERROR: Musl prebuild file not found at $MUSL_PREBUILD_PATH"
            # List contents for debugging
            echo "--- Listing contents of ./docker-prebuilds-musl-output/ ---"
            ls -LR ./docker-prebuilds-musl-output/
            exit 1
          fi
          
          echo "--- Listing final contents of tools/node-clingo/prebuilds/linux-${{ matrix.arch }}/ ---"
          ls -L tools/node-clingo/prebuilds/linux-${{ matrix.arch }}/

      - name: Prebuild macos/windows
        if: runner.os == 'macOS' || runner.os == 'Windows'
        working-directory: tools/node-clingo
        run: pnpm build-prebuildify
        env:
          PREBUILD_ARCH: ${{ matrix.arch }}

      - name: Upload prebuilds as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: node-clingo-prebuild-${{ runner.os }}-${{ matrix.arch }}
          path: tools/node-clingo/prebuilds/

  collect-prebuilds:
    needs: [check-version-change, build-prebuilds]
    if: |
      (github.event_name == 'pull_request' && github.base_ref == 'main') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.check-version-change.outputs.version_changed == 'true')
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Download all prebuilds
        uses: actions/download-artifact@v4
        with:
          path: all-prebuilds

      - name: Download Clingo LICENSE
        run: curl -L -o CLINGO_LICENSE.md https://raw.githubusercontent.com/potassco/clingo/master/LICENSE.md

      - name: Organize prebuilds
        shell: bash
        run: |
          mkdir -p tools/node-clingo/prebuilds/
          cp -r all-prebuilds/*/* tools/node-clingo/prebuilds/
          ls -la tools/node-clingo/prebuilds/
          node tools/node-clingo/scripts/collect-prebuilds.js

          # Now, copy the CLINGO_LICENSE.md
          for platform_arch_dir in tools/node-clingo/prebuilds/*/; do
            if [ -d "$platform_arch_dir" ]; then
              echo "Copying CLINGO_LICENSE.md to ${platform_arch_dir}LICENSE.md"
              cp CLINGO_LICENSE.md "${platform_arch_dir}LICENSE.md"
            fi
          done

      - name: Upload combined prebuilds
        uses: actions/upload-artifact@v4
        with:
          name: node-clingo-prebuilds-all
          path: tools/node-clingo/prebuilds/

      - name: Package prebuilds for each platform
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.check-version-change.outputs.version_changed == 'true'
        run: |
          mkdir -p release-assets
          # Navigate to prebuilds directory correctly
          cd tools/node-clingo/prebuilds
          
          # List all platform-arch directories
          for platform_arch_dir in */; do
            # Ensure that only directories are being processed
            if [ -d "$platform_arch_dir" ]; then
              platform_arch=${platform_arch_dir%/}
              echo "Packaging $platform_arch"
              
              # Create tarballs directly from platform-arch directories
              tar -czf ../../../release-assets/${platform_arch}.tar.gz -C "$platform_arch_dir" .
            fi
          done
          
          # Navigate to the base directory before listing assets
          cd ../../../
          ls -la release-assets

      - name: Get package version
        id: package_version
        run: |
          VERSION=${{ needs.check-version-change.outputs.version }}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.check-version-change.outputs.version_changed == 'true'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: node-clingo-${{ steps.package_version.outputs.version }}
          name: Node Clingo v${{ steps.package_version.outputs.version }}
          files: release-assets/*
          draft: false
          prerelease: false