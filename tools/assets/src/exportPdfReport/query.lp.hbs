{{#if cardKey}}
result({{cardKey}}).

{{#if recursive}}
result(Card) :- parent(Card, Parent), result(Parent).
{{/if}}

{{else}}
result(Card) :- projectCard(Card), not hiddenInTreeView(Card).
{{/if}}

% Calculate depth levels
cardLevel(Card, 1) :- result(Card), not parent(Card, _).
cardLevel(Card, Level + 1) :- 
    cardLevel(Parent, Level), 
    parent(Card, Parent), 
    result(Card).

% Create a path-based ordering system using string concatenation
% For each card, create a path that represents its position in the tree
% Root cards: just their rank (already lexicographically sortable)
% Child cards: parent's path + "!" + own rank

% Base case: root cards use their rank directly as the path
treePath(Card, Rank) :- 
    cardLevel(Card, 1),
    result(Card),
    field(Card, "rank", Rank).

% Recursive case: children append their rank to parent's path
treePath(Card, FullPath) :-
    cardLevel(Card, Level),
    Level > 1,
    parent(Card, Parent),
    treePath(Parent, ParentPath),
    field(Card, "rank", Rank),
    result(Card),
    FullPath = @concatenate(ParentPath, "!", Rank).

% Sort by tree path (lexicographic ordering will give us depth-first)
order(1, "results", 1, "treePath", "ASC").

% Map level to levelOffset and add tree path for sorting
field(Card, "levelOffset", Level) :- cardLevel(Card, Level), result(Card).
field(Card, "treePath", Path) :- treePath(Card, Path), result(Card).

% Add fields structure similar to card query
% a helper term for display names
displayName(Card, (Card, Field), DisplayName) :-
    field(Card, Field, _),
    fieldType(Field),
    field(Field, "displayName", DisplayName),
    field(Card, "cardType", CardType),
    not field((CardType, Field), "displayName", _).

displayName(Card, (Card, Field), DisplayName) :-
    field(Card, "cardType", CardType),
    fieldType(Field),
    field((CardType, Field), "displayName", DisplayName).

% the second level includes metadata for the always visible and optionally visible fields
field((Card, Field), "key", Field) :-
    customField(CardType, Field),
    field(Card, "cardType", CardType),
    result(Card).

field((Card, Field), "visibility", "always") :-
    alwaysVisibleField(CardType, Field),
    field(Card, "cardType", CardType),
    result(Card).

field((Card, Field), "visibility", "optional") :-
    optionallyVisibleField(CardType, Field),
    field(Card, "cardType", CardType),
    result(Card).

field((Card, Field), "index", Index) :-
    alwaysVisibleField(CardType, Field),
    field((CardType, Field), "index", Index),
    field(Card, "cardType", CardType),
    result(Card).

field((Card, Field), "index", Index) :-
    optionallyVisibleField(CardType, Field),
    field((CardType, Field), "index", Index),
    field(Card, "cardType", CardType),
    result(Card).

field((Card, Field), "fieldDisplayName", DisplayName, "shortText") :-
    childResult(Card, (Card, Field), "fields"),
    result(Card),
    displayName(Card, (Card, Field), DisplayName).

field((Card, Field), "fieldDescription", Description, "shortText") :-
    childResult(Card, (Card, Field), "fields"),
    result(Card),
    field(Field, "description", Description).

% add value
dataType((Card, Field), "value", DataType) :-
    childResult(Card, (Card, Field), "fields"),
    result(Card),
    field(Card, Field, Value),
    dataType(Card, Field, DataType).

% add value
field((Card, Field), "value", Value) :-
    childResult(Card, (Card, Field), "fields"),
    field(Card, Field, Value).

% add cardTypeDisplayName
field(Card, "cardTypeDisplayName", DisplayName, "shortText") :-
    result(Card),
    field(Card, "cardType", CardType),
    field(CardType, "displayName", DisplayName).

% select only non-custom fields
select(1, "cardType").
select(1, "cardTypeDisplayName").
select(1, "key").
select(1, "lastUpdated").
select(1, "links").
select(1, "labels").

% Fields
select(2, "fields", "key").
select(2, "fields", "visibility").
select(2, "fields", "index").
select(2, "fields", "fieldDisplayName").
select(2, "fields", "fieldDescription").
select(2, "fields", "value").

childResultCollection(Card, "fields") :-
    result(Card).

childResult(Card, (Card, Field), "fields") :-
    alwaysVisibleField(CardType, Field),
    field(Card, "cardType", CardType),
    result(Card).

childResult(Card, (Card, Field), "fields") :-
    optionallyVisibleField(CardType, Field),
    field(Card, "cardType", CardType),
    result(Card).

order(2, "fields", 1, "visibility", "ASC").
order(2, "fields", 2, "index", "ASC").
